"""New Alembic revision

Revision ID: 58edc36ebcc
Revises:
Create Date: 2015-02-11 14:28:48.147547

"""

# revision identifiers, used by Alembic.
revision = '58edc36ebcc'
down_revision = None
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa

from planner.model.engagement import (
    Status,
    Alignment,
    Probability,
    Sustainability,
    Complexity,
    Engagement,
)

from planner.model.team import Team

from planner.model.client import Client

from planner.model import Base, EngagementIteration

from sqlalchemy.orm import sessionmaker

from sqlalchemy import (
    distinct,
    Enum,
    Column,
    Integer,
    Text,
    Boolean,
    ForeignKey,
    Table
)

from sqlalchemy.ext.declarative import declarative_base

from datetime import date

Session = sessionmaker()

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('Probability',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('value')
    )
    op.create_table('Alignment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('value')
    )
    op.create_table('CostType',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('Sustainability',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('value')
    )
    op.create_table('ExpenseType',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('Client',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('Status',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('Complexity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('guide_revenue', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('value')
    )
    op.create_table('Contact',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('forename', sa.Text(), nullable=False),
    sa.Column('surname', sa.Text(), nullable=False),
    sa.Column('role', sa.Text(), nullable=True),
    sa.Column('email', sa.Text(), nullable=True),
    sa.Column('landlineno', sa.Text(), nullable=True),
    sa.Column('mobileno', sa.Text(), nullable=True),
    sa.Column('postcode', sa.Text(), nullable=True),
    sa.Column('streetname', sa.Text(), nullable=True),
    sa.Column('streetnumber', sa.Text(), nullable=True),
    sa.Column('clientid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['clientid'], ['Client.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('TeamMember',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('forename', sa.Text(), nullable=False),
    sa.Column('surname', sa.Text(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('gmail', sa.Text(), nullable=False),
    sa.Column('mobileno', sa.Text(), nullable=False),
    sa.Column('twitter', sa.Text(), nullable=False),
    sa.Column('github', sa.Text(), nullable=False),
    sa.Column('picture', sa.Text(), nullable=False),
    sa.Column('bio', sa.Text(), nullable=False),
    sa.Column('teamid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['teamid'], ['Team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('EngagementIteration',
    sa.Column('engagementid', sa.Integer(), nullable=False),
    sa.Column('iterationid', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['engagementid'], ['Engagement.id'], ),
    sa.ForeignKeyConstraint(['iterationid'], ['Iteration.id'], ),
    sa.PrimaryKeyConstraint('engagementid', 'iterationid')
    )
    op.create_table('Cost',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('costtypeid', sa.Integer(), nullable=True),
    sa.Column('teammemberid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['costtypeid'], ['CostType.id'], ),
    sa.ForeignKeyConstraint(['teammemberid'], ['TeamMember.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('Expense',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('trackerid', sa.Text(), nullable=False),
    sa.Column('paid', sa.Boolean(), nullable=False),
    sa.Column('engagementid', sa.Integer(), nullable=True),
    sa.Column('typeid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['engagementid'], ['Engagement.id'], ),
    sa.ForeignKeyConstraint(['typeid'], ['ExpenseType.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    bind = op.get_bind()
    session = Session(bind=bind)

    for status in ['Lost', 'Approach', 'Negotiation', 'Sold', 'Complete']:
        session.add(Status(name=status))
    for value, name in [(0.0, 'Certainly Unaligned'),
                        (0.1, 'Almost Certainly Unaligned'),
                        (0.2, 'Largely Unaligned'),
                        (0.3, 'Probably Unaligned'),
                        (0.4, 'Generally Unaligned'),
                        (0.5, 'Unsure'),
                        (0.6, 'Generally Aligned'),
                        (0.7, 'Probably Aligned'),
                        (0.8, 'Largely Aligned'),
                        (0.9, 'Almost Certainly Aligned'),
                        (1.0, 'Certainly Aligned')]:
        session.add(Alignment(value=value, name=name))
    for value, name in [(0.0, 'Impossible to Sustain'),
                        (0.1, 'Almost Impossible to Sustain'),
                        (0.2, 'Very Challenging to Sustain'),
                        (0.3, 'Challenging to Sustain'),
                        (0.4, 'Generally Unsustainable'),
                        (0.5, 'Unsure'),
                        (0.6, 'Generally Sustainable'),
                        (0.7, 'Easy to Sustain'),
                        (0.8, 'Very Easy to Sustain'),
                        (0.9, 'Almost Certain to Sustain'),
                        (1.0, 'Certain to Sustain')]:
        session.add(Sustainability(name=name, value=value))
    for value, name in [(0.0, 'Lost'),
                        (0.1, 'Almost Lost'),
                        (0.2, 'Very Probably Lost'),
                        (0.3, 'Probably Lost'),
                        (0.4, 'Possibly Lost'),
                        (0.5, 'Unsure'),
                        (0.6, 'Possibly Won'),
                        (0.7, 'Probably Won'),
                        (0.8, 'Very Probably Won'),
                        (0.9, 'Almost Certainly Won'),
                        (1.0, 'Won')]:
        session.add(Probability(name=name, value=value))
    for value, name in [(0.1, 'Tiny'),
                        (0.5, 'Small'),
                        (1.0, 'Medium'),
                        (2.0, 'Large')]:
        session.add(Complexity(name=name, value=value))

    specialBase = declarative_base()

    class OldEngagement(specialBase):
        __tablename__ = 'Engagement'
        id = Column(Integer, autoincrement=True, primary_key=True)
        teamid = Column(Integer, ForeignKey('Team.id'), default=1)
        name = Column(Text, nullable=False)
        complexity = Column(Enum('0.1', '0.5', '1.0', '2.0',
                                 name='engagementcomplexity'), nullable=False)
        client = Column(Text, nullable=False)
        sowlink = Column(Text, nullable=False)
        probability = Column(Enum('0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6',
                                  '0.7', '0.8', '0.9', '1.0',
                                  name='engagementprobability'), nullable=False)
        sustainability = Column(Enum('0.1', '0.2', '0.3', '0.4', '0.5', '0.6',
                                     '0.7', '0.8', '0.9', '1.0',
                                     name='engagementsustainability'),
                                nullable=False)
        alignment = Column(Enum('0.0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6',
                                '0.7', '0.8', '0.9', '1.0',
                                name='engagementalignment'), nullable=False)
        revenue = Column(Integer, nullable=False)
        isrnd = Column(Boolean, nullable=False)
        status = Column(Enum('Complete', 'Sold', 'Negotiation', 'Approach', 'Lost',
                             name='engagementstatus'), nullable=False)

    class ActualEngagementIteration(specialBase):
        __tablename__ = 'ActualEngagementIteration'
        id = Column(Integer, primary_key=True)
        engagementid = Column(Integer)
        iterationid = Column(Integer)

    engagements = session.query(
        OldEngagement.id,
        OldEngagement.teamid,
        OldEngagement.name,
        OldEngagement.complexity,
        OldEngagement.client,
        OldEngagement.probability,
        OldEngagement.sustainability,
        OldEngagement.alignment,
        OldEngagement.revenue,
        OldEngagement.isrnd,
        OldEngagement.status).all()

    eng_dicts = [dict(zip((
        'id',
        'teamid',
        'name',
        'complexityid',
        'clientid',
        'probabilityid',
        'sustainabilityid',
        'alignmentid',
        'revenue',
        'isrnd',
        'statusid'),
        result)) for result in engagements]

    sustainability = session.query(
        Sustainability.id,
        Sustainability.name,
        Sustainability.value)

    sustainability_dicts = [dict(zip((
        'id',
        'name',
        'value'),
    result)) for result in sustainability]

    probability = session.query(
        Probability.id,
        Probability.name,
        Probability.value)

    probability_dicts = [dict(zip((
        'id',
        'name',
        'value'),
    result)) for result in probability]

    status = session.query(
        Status.id,
        Status.name)

    status_dicts = [dict(zip((
        'id',
        'name'),
    result)) for result in status]

    alignment = session.query(
        Alignment.id,
        Alignment.name,
        Alignment.value)

    alignment_dicts = [dict(zip((
        'id',
        'name',
        'value'),
    result)) for result in alignment]

    complexity = session.query(
        Complexity.id,
        Complexity.name,
        Complexity.value)

    complexity_dicts = [dict(zip((
        'id',
        'name',
        'value'),
    result)) for result in complexity]

    client = [Client(name=name[0]) for name in session.query(OldEngagement.client).distinct()]
    session.add_all(client)

    engagement_iterations = [EngagementIteration(
        engagementid = record[0],
        iterationid = record[1]
        )
        for record in session.query(
            ActualEngagementIteration.engagementid,
            ActualEngagementIteration.iterationid)]
    session.add_all(engagement_iterations)

    session.commit()

    session = Session(bind=bind)

    client = session.query(Client.id, Client.name)

    client_dicts = [dict(zip((
        'id',
        'name'),
    result)) for result in client]

    for result in eng_dicts:
        for record in client_dicts:
            if result['clientid'] == str(record['name']):
                result['clientid'] = record['id']
        for record in complexity_dicts:
            if result['complexityid'] == str(record['value']):
                result['complexityid'] =  record['id']
        for record in sustainability_dicts:
            if result['sustainabilityid'] == str(record['value']):
                result['sustainabilityid'] = record['id']
        for record in alignment_dicts:
            if result['alignmentid'] == str(record['value']):
                result['alignmentid'] = record['id']
        for record in sustainability_dicts:
            if result['probabilityid'] == str(record['value']):
                result['probabilityid'] = record['id']
        for record in status_dicts:
            if result['statusid'] == record['name']:
                result['statusid'] = record['id']

    op.drop_table('Engagement')
    op.create_table('Engagement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('revenue', sa.Integer(), nullable=False),
    sa.Column('alignmentid', sa.Integer(), nullable=True),
    sa.Column('backlog', sa.Text(), nullable=True),
    sa.Column('clientid', sa.Integer(), nullable=True),
    sa.Column('complexityid', sa.Integer(), nullable=True),
    sa.Column('ponumber', sa.Text(), nullable=True),
    sa.Column('probabilityid', sa.Integer(), nullable=True),
    sa.Column('proposal', sa.Text(), nullable=True),
    sa.Column('statusid', sa.Integer(), nullable=True),
    sa.Column('sustainabilityid', sa.Integer(), nullable=True),
    sa.Column('isrnd', sa.BOOLEAN(), nullable=True),
    sa.Column('teamid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['teamid'], ['Team.id']),
    sa.ForeignKeyConstraint(['complexityid'], ['Complexity.id']),
    sa.ForeignKeyConstraint(['statusid'], ['Status.id']),
    sa.ForeignKeyConstraint(['probabilityid'], ['Probability.id']),
    sa.ForeignKeyConstraint(['sustainabilityid'], ['Sustainability.id']),
    sa.ForeignKeyConstraint(['clientid'], ['Client.id']),
    sa.ForeignKeyConstraint(['alignmentid'], ['Alignment.id']),
    sa.PrimaryKeyConstraint('id')
    )

    final = [Engagement(
        id = record['id'],
        name = record['name'],
        revenue = record['revenue'],
        alignmentid = record['alignmentid'],
        clientid = record['clientid'],
        complexityid = record['complexityid'],
        probabilityid = record['probabilityid'],
        statusid = record['statusid'],
        sustainabilityid = record['sustainabilityid'],
        isrnd = record['isrnd'],
        teamid = record['teamid'])
        for record in eng_dicts]
    session.add_all(final)

    op.drop_table('ActualEngagementIteration')
    op.drop_table('FreeEngagementIteration')

    session.commit()

    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    # Jordan: Do not downgrade, totally not checked this stuff
    op.add_column(u'Team', sa.Column('cost', sa.INTEGER(), nullable=False))
    op.add_column(u'Engagement', sa.Column('alignment', sa.VARCHAR(length=3), nullable=False))
    op.add_column(u'Engagement', sa.Column('sowlink', sa.TEXT(), nullable=False))
    op.add_column(u'Engagement', sa.Column('client', sa.TEXT(), nullable=False))
    op.add_column(u'Engagement', sa.Column('complexity', sa.VARCHAR(length=3), nullable=False))
    op.add_column(u'Engagement', sa.Column('sustainability', sa.VARCHAR(length=3), nullable=False))
    op.add_column(u'Engagement', sa.Column('probability', sa.VARCHAR(length=3), nullable=False))
    op.add_column(u'Engagement', sa.Column('status', sa.VARCHAR(length=11), nullable=False))
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.alter_column(u'Engagement', 'isrnd',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_column(u'Engagement', 'sustainabilityid')
    op.drop_column(u'Engagement', 'statusid')
    op.drop_column(u'Engagement', 'proposal')
    op.drop_column(u'Engagement', 'probabilityid')
    op.drop_column(u'Engagement', 'ponumber')
    op.drop_column(u'Engagement', 'complexityid')
    op.drop_column(u'Engagement', 'clientid')
    op.drop_column(u'Engagement', 'backlog')
    op.drop_column(u'Engagement', 'alignmentid')
    op.create_table('FreeEngagementIteration',
    sa.Column('engagementid', sa.INTEGER(), nullable=True),
    sa.Column('iterationid', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['engagementid'], [u'Engagement.id'], ),
    sa.ForeignKeyConstraint(['iterationid'], [u'Iteration.id'], ),
    )
    op.create_table('ActualEngagementIteration',
    sa.Column('engagementid', sa.INTEGER(), nullable=True),
    sa.Column('iterationid', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['engagementid'], [u'Engagement.id'], ),
    sa.ForeignKeyConstraint(['iterationid'], [u'Iteration.id'], )
    )
    op.drop_table('Expense')
    op.drop_table('Cost')
    op.drop_table('EngagementIteration')
    op.drop_table('TeamMember')
    op.drop_table('Contact')
    op.drop_table('Complexity')
    op.drop_table('Status')
    op.drop_table('Client')
    op.drop_table('ExpenseType')
    op.drop_table('Sustainability')
    op.drop_table('CostType')
    op.drop_table('Alignment')
    op.drop_table('Probability')
    ### end Alembic commands ###
